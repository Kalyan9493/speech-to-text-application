{"ast":null,"code":"var _jsxFileName = \"C:\\\\desktop\\\\Personal Projects\\\\speech-to-text\\\\src\\\\SpeechToText.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpeechToText = () => {\n  _s();\n  const {\n    sessionId\n  } = useParams();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const role = searchParams.get('role');\n  const isSender = role === 'sender';\n  const [text, setText] = useState([]);\n  const [isListening, setIsListening] = useState(false);\n  const recognitionRef = useRef(null);\n  const socketRef = useRef(null);\n  const [interimTranscript, setInterimTranscript] = useState('');\n  useEffect(() => {\n    socketRef.current = new WebSocket(`ws://localhost:5000?session=${sessionId}`);\n    socketRef.current.onmessage = async event => {\n      try {\n        const data = await event.data.text(); // Convert Blob to text\n        const receivedText = JSON.parse(data); // Parse the JSON text\n        setText(prevText => [...prevText, receivedText]);\n      } catch (error) {\n        console.error('Error parsing message:', error);\n      }\n    };\n    return () => {\n      socketRef.current.close();\n    };\n  }, [sessionId]);\n  useEffect(() => {\n    if (isSender) {\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      if (SpeechRecognition) {\n        const recog = new SpeechRecognition();\n        recog.continuous = true; // Ensure continuous listening\n        recog.interimResults = true;\n        recog.lang = 'en-IN';\n        recog.onresult = event => {\n          let interimTranscript = '';\n          for (let i = event.resultIndex; i < event.results.length; i++) {\n            const transcript = event.results[i][0].transcript.trim();\n            if (event.results[i].isFinal) {\n              setText(prevText => [...prevText, transcript]);\n              setInterimTranscript('');\n              socketRef.current.send(JSON.stringify(transcript));\n            } else {\n              interimTranscript += transcript + ' ';\n            }\n          }\n          setInterimTranscript(interimTranscript);\n        };\n        recog.onerror = event => {\n          console.error('Speech recognition error:', event.error);\n        };\n        recog.onend = () => {\n          if (isListening) {\n            recog.start(); // Restart listening automatically after stopping\n          }\n        };\n        recognitionRef.current = recog;\n      } else {\n        alert('Your browser does not support speech recognition.');\n      }\n    }\n  }, [isListening, isSender]);\n  const startListening = () => {\n    if (recognitionRef.current && !isListening) {\n      recognitionRef.current.start();\n      setIsListening(true);\n    }\n  };\n  const stopListening = () => {\n    if (recognitionRef.current && isListening) {\n      recognitionRef.current.stop();\n      setIsListening(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isSender && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: isListening ? stopListening : startListening,\n      children: isListening ? 'Stop Listening' : 'Start Listening'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [text.map((line, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: line\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)), interimTranscript && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'gray'\n        },\n        children: interimTranscript\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(SpeechToText, \"2ZCkxhxxccBtbp0rxQLyCfzCfH8=\", false, function () {\n  return [useParams, useLocation];\n});\n_c = SpeechToText;\nexport default SpeechToText;\nvar _c;\n$RefreshReg$(_c, \"SpeechToText\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","useLocation","jsxDEV","_jsxDEV","SpeechToText","_s","sessionId","location","searchParams","URLSearchParams","search","role","get","isSender","text","setText","isListening","setIsListening","recognitionRef","socketRef","interimTranscript","setInterimTranscript","current","WebSocket","onmessage","event","data","receivedText","JSON","parse","prevText","error","console","close","SpeechRecognition","window","webkitSpeechRecognition","recog","continuous","interimResults","lang","onresult","i","resultIndex","results","length","transcript","trim","isFinal","send","stringify","onerror","onend","start","alert","startListening","stopListening","stop","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","line","index","style","color","_c","$RefreshReg$"],"sources":["C:/desktop/Personal Projects/speech-to-text/src/SpeechToText.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useParams, useLocation } from 'react-router-dom';\r\n\r\nconst SpeechToText = () => {\r\n  const { sessionId } = useParams();\r\n  const location = useLocation();\r\n  const searchParams = new URLSearchParams(location.search);\r\n  const role = searchParams.get('role');\r\n  const isSender = role === 'sender';\r\n\r\n  const [text, setText] = useState([]);\r\n  const [isListening, setIsListening] = useState(false);\r\n  const recognitionRef = useRef(null);\r\n  const socketRef = useRef(null);\r\n  const [interimTranscript, setInterimTranscript] = useState('');\r\n\r\n  useEffect(() => {\r\n    socketRef.current = new WebSocket(`ws://localhost:5000?session=${sessionId}`);\r\n\r\n    socketRef.current.onmessage = async (event) => {\r\n      try {\r\n        const data = await event.data.text(); // Convert Blob to text\r\n        const receivedText = JSON.parse(data); // Parse the JSON text\r\n        setText((prevText) => [...prevText, receivedText]);\r\n      } catch (error) {\r\n        console.error('Error parsing message:', error);\r\n      }\r\n    };\r\n\r\n    return () => {\r\n      socketRef.current.close();\r\n    };\r\n  }, [sessionId]);\r\n\r\n  useEffect(() => {\r\n    if (isSender) {\r\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n      if (SpeechRecognition) {\r\n        const recog = new SpeechRecognition();\r\n        recog.continuous = true; // Ensure continuous listening\r\n        recog.interimResults = true;\r\n        recog.lang = 'en-IN';\r\n\r\n        recog.onresult = (event) => {\r\n          let interimTranscript = '';\r\n\r\n          for (let i = event.resultIndex; i < event.results.length; i++) {\r\n            const transcript = event.results[i][0].transcript.trim();\r\n            if (event.results[i].isFinal) {\r\n              setText((prevText) => [...prevText, transcript]);\r\n              setInterimTranscript('');\r\n              socketRef.current.send(JSON.stringify(transcript));\r\n            } else {\r\n              interimTranscript += transcript + ' ';\r\n            }\r\n          }\r\n\r\n          setInterimTranscript(interimTranscript);\r\n        };\r\n\r\n        recog.onerror = (event) => {\r\n          console.error('Speech recognition error:', event.error);\r\n        };\r\n\r\n        recog.onend = () => {\r\n          if (isListening) {\r\n            recog.start(); // Restart listening automatically after stopping\r\n          }\r\n        };\r\n\r\n        recognitionRef.current = recog;\r\n      } else {\r\n        alert('Your browser does not support speech recognition.');\r\n      }\r\n    }\r\n  }, [isListening, isSender]);\r\n\r\n  const startListening = () => {\r\n    if (recognitionRef.current && !isListening) {\r\n      recognitionRef.current.start();\r\n      setIsListening(true);\r\n    }\r\n  };\r\n\r\n  const stopListening = () => {\r\n    if (recognitionRef.current && isListening) {\r\n      recognitionRef.current.stop();\r\n      setIsListening(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isSender && (\r\n        <button onClick={isListening ? stopListening : startListening}>\r\n          {isListening ? 'Stop Listening' : 'Start Listening'}\r\n        </button>\r\n      )}\r\n      <div>\r\n        {text.map((line, index) => (\r\n          <p key={index}>{line}</p>\r\n        ))}\r\n        {interimTranscript && <p style={{ color: 'gray' }}>{interimTranscript}</p>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpeechToText;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}