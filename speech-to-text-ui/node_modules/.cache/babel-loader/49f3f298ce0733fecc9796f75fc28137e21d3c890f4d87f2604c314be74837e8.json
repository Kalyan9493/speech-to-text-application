{"ast":null,"code":"var _jsxFileName = \"C:\\\\desktop\\\\Personal Projects\\\\speech-to-text\\\\src\\\\SpeechToText.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport './SpeechToText.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SpeechToText = () => {\n  _s();\n  const {\n    sessionId\n  } = useParams();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const role = searchParams.get('role'); // 'sender' or 'receiver'\n\n  const [text, setText] = useState([]);\n  const [interimText, setInterimText] = useState('');\n  const [isListening, setIsListening] = useState(false);\n  const recognitionRef = useRef(null);\n  const socketRef = useRef(null);\n  const lastTextRef = useRef(null);\n  useEffect(() => {\n    socketRef.current = new WebSocket(`ws://localhost:5000?session=${sessionId}`);\n    socketRef.current.onmessage = async event => {\n      try {\n        const data = await event.data.text(); // Convert Blob to text\n        const receivedData = JSON.parse(data);\n        if (receivedData.type === 'final') {\n          setText(prevText => [...prevText, receivedData.text]);\n          setInterimText(''); // Clear interim text once the final text is received\n        } else if (receivedData.type === 'interim') {\n          setInterimText(receivedData.text); // Update interim text\n        }\n      } catch (error) {\n        console.error('Error parsing message:', error);\n      }\n    };\n    return () => {\n      socketRef.current.close();\n    };\n  }, [sessionId]);\n  useEffect(() => {\n    if (role === 'sender') {\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      if (SpeechRecognition) {\n        const recog = new SpeechRecognition();\n        recog.continuous = true; // Keep listening even after pauses\n        recog.interimResults = true;\n        recog.lang = 'en-IN';\n        recog.onresult = event => {\n          let interimTranscript = '';\n          for (let i = event.resultIndex; i < event.results.length; i++) {\n            const transcript = event.results[i][0].transcript.trim();\n            if (event.results[i].isFinal) {\n              setText(prevText => [...prevText, transcript]);\n              socketRef.current.send(JSON.stringify({\n                type: 'final',\n                text: transcript\n              }));\n            } else {\n              interimTranscript += transcript + ' ';\n              socketRef.current.send(JSON.stringify({\n                type: 'interim',\n                text: interimTranscript\n              }));\n            }\n          }\n          setInterimText(interimTranscript);\n        };\n        recog.onerror = event => {\n          console.error('Speech recognition error:', event.error);\n        };\n        recog.onend = () => {\n          if (isListening) {\n            recog.start(); // Restart listening if it's still active\n          }\n        };\n        recognitionRef.current = recog;\n      } else {\n        alert('Your browser does not support speech recognition.');\n      }\n    }\n  }, [isListening, role]);\n  const startListening = () => {\n    if (recognitionRef.current && !isListening) {\n      recognitionRef.current.start();\n      setIsListening(true);\n    }\n  };\n  const stopListening = () => {\n    if (recognitionRef.current && isListening) {\n      recognitionRef.current.stop();\n      setIsListening(false);\n    }\n  };\n  useEffect(() => {\n    if (lastTextRef.current) {\n      lastTextRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'start'\n      });\n    }\n  }, [text]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"speech-to-text-container\",\n    children: [role === 'sender' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: isListening ? stopListening : startListening,\n        className: \"listen-button\",\n        children: isListening ? 'Stop Listening' : 'Start Listening'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this)\n    }, void 0, false), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-output\",\n      children: [text.map((line, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        ref: index === text.length - 1 ? lastTextRef : null,\n        children: line\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this)), interimText && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'gray'\n        },\n        children: interimText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(SpeechToText, \"3+I/JP6ZuhtVaHmBFVhSq2+r/b8=\", false, function () {\n  return [useParams, useLocation];\n});\n_c = SpeechToText;\nexport default SpeechToText;\nvar _c;\n$RefreshReg$(_c, \"SpeechToText\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","useLocation","jsxDEV","_jsxDEV","Fragment","_Fragment","SpeechToText","_s","sessionId","location","searchParams","URLSearchParams","search","role","get","text","setText","interimText","setInterimText","isListening","setIsListening","recognitionRef","socketRef","lastTextRef","current","WebSocket","onmessage","event","data","receivedData","JSON","parse","type","prevText","error","console","close","SpeechRecognition","window","webkitSpeechRecognition","recog","continuous","interimResults","lang","onresult","interimTranscript","i","resultIndex","results","length","transcript","trim","isFinal","send","stringify","onerror","onend","start","alert","startListening","stopListening","stop","scrollIntoView","behavior","block","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","line","index","ref","style","color","_c","$RefreshReg$"],"sources":["C:/desktop/Personal Projects/speech-to-text/src/SpeechToText.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useParams, useLocation } from 'react-router-dom';\r\nimport './SpeechToText.css';\r\n\r\nconst SpeechToText = () => {\r\n  const { sessionId } = useParams();\r\n  const location = useLocation();\r\n  const searchParams = new URLSearchParams(location.search);\r\n  const role = searchParams.get('role'); // 'sender' or 'receiver'\r\n\r\n  const [text, setText] = useState([]);\r\n  const [interimText, setInterimText] = useState('');\r\n  const [isListening, setIsListening] = useState(false);\r\n  const recognitionRef = useRef(null);\r\n  const socketRef = useRef(null);\r\n  const lastTextRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    socketRef.current = new WebSocket(`ws://localhost:5000?session=${sessionId}`);\r\n\r\n    socketRef.current.onmessage = async (event) => {\r\n      try {\r\n        const data = await event.data.text(); // Convert Blob to text\r\n        const receivedData = JSON.parse(data);\r\n\r\n        if (receivedData.type === 'final') {\r\n          setText((prevText) => [...prevText, receivedData.text]);\r\n          setInterimText(''); // Clear interim text once the final text is received\r\n        } else if (receivedData.type === 'interim') {\r\n          setInterimText(receivedData.text); // Update interim text\r\n        }\r\n      } catch (error) {\r\n        console.error('Error parsing message:', error);\r\n      }\r\n    };\r\n\r\n    return () => {\r\n      socketRef.current.close();\r\n    };\r\n  }, [sessionId]);\r\n\r\n  useEffect(() => {\r\n    if (role === 'sender') {\r\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n      if (SpeechRecognition) {\r\n        const recog = new SpeechRecognition();\r\n        recog.continuous = true; // Keep listening even after pauses\r\n        recog.interimResults = true;\r\n        recog.lang = 'en-IN';\r\n\r\n        recog.onresult = (event) => {\r\n          let interimTranscript = '';\r\n\r\n          for (let i = event.resultIndex; i < event.results.length; i++) {\r\n            const transcript = event.results[i][0].transcript.trim();\r\n            if (event.results[i].isFinal) {\r\n              setText((prevText) => [...prevText, transcript]);\r\n              socketRef.current.send(JSON.stringify({ type: 'final', text: transcript }));\r\n            } else {\r\n              interimTranscript += transcript + ' ';\r\n              socketRef.current.send(JSON.stringify({ type: 'interim', text: interimTranscript }));\r\n            }\r\n          }\r\n\r\n          setInterimText(interimTranscript);\r\n        };\r\n\r\n        recog.onerror = (event) => {\r\n          console.error('Speech recognition error:', event.error);\r\n        };\r\n\r\n        recog.onend = () => {\r\n          if (isListening) {\r\n            recog.start(); // Restart listening if it's still active\r\n          }\r\n        };\r\n\r\n        recognitionRef.current = recog;\r\n      } else {\r\n        alert('Your browser does not support speech recognition.');\r\n      }\r\n    }\r\n  }, [isListening, role]);\r\n\r\n  const startListening = () => {\r\n    if (recognitionRef.current && !isListening) {\r\n      recognitionRef.current.start();\r\n      setIsListening(true);\r\n    }\r\n  };\r\n\r\n  const stopListening = () => {\r\n    if (recognitionRef.current && isListening) {\r\n      recognitionRef.current.stop();\r\n      setIsListening(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (lastTextRef.current) {\r\n      lastTextRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n    }\r\n  }, [text]);\r\n\r\n  return (\r\n    <div className=\"speech-to-text-container\">\r\n      {role === 'sender' && (\r\n        <>\r\n          <button onClick={isListening ? stopListening : startListening} className=\"listen-button\">\r\n            {isListening ? 'Stop Listening' : 'Start Listening'}\r\n          </button>\r\n        </>\r\n      )}\r\n      <div className=\"text-output\">\r\n        {text.map((line, index) => (\r\n          <p key={index} ref={index === text.length - 1 ? lastTextRef : null}>\r\n            {line}\r\n          </p>\r\n        ))}\r\n        {interimText && <p style={{ color: 'gray' }}>{interimText}</p>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpeechToText;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}