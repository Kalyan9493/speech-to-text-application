{"ast":null,"code":"var _jsxFileName = \"C:\\\\desktop\\\\Personal Projects\\\\speech-to-text\\\\src\\\\SpeechToText.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpeechToText = () => {\n  _s();\n  const [text, setText] = useState([]); // Store transcribed text segments\n  const [isListening, setIsListening] = useState(false); // Toggle listening state\n  const recognitionRef = useRef(null); // Ref to store SpeechRecognition instance\n  const [interimTranscript, setInterimTranscript] = useState(''); // Store interim results\n\n  useEffect(() => {\n    // Initialize the SpeechRecognition instance\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (SpeechRecognition) {\n      const recog = new SpeechRecognition();\n      recog.continuous = true;\n      recog.interimResults = true; // Enable interim results for real-time transcription\n      recog.lang = 'en-IN'; // Set to English (India)\n\n      recog.onresult = event => {\n        let finalTranscript = '';\n        let interimTranscript = '';\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n          const transcript = event.results[i][0].transcript.trim();\n          if (event.results[i].isFinal) {\n            finalTranscript += transcript + ' ';\n          } else {\n            interimTranscript += transcript + ' ';\n          }\n        }\n        setInterimTranscript(interimTranscript); // Update interim transcript\n\n        if (finalTranscript) {\n          setText(prevText => [...prevText, finalTranscript]); // Add final results to text\n          setInterimTranscript(''); // Clear interim results once they are finalized\n        }\n      };\n      recog.onerror = event => {\n        console.error('Speech recognition error:', event.error);\n        setIsListening(false);\n      };\n      recog.onend = () => {\n        if (isListening) {\n          recog.start(); // Restart recognition if still listening\n        }\n      };\n      recognitionRef.current = recog; // Store the recognition instance in ref\n    } else {\n      alert('Your browser does not support speech recognition.');\n    }\n  }, [isListening]);\n  const startListening = () => {\n    if (recognitionRef.current) {\n      recognitionRef.current.start();\n      setIsListening(true);\n    }\n  };\n  const stopListening = () => {\n    if (recognitionRef.current) {\n      recognitionRef.current.stop();\n      setIsListening(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: isListening ? stopListening : startListening,\n      children: isListening ? 'Stop Listening' : 'Start Listening'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [text.map((line, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: line\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)), interimTranscript && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'gray'\n        },\n        children: interimTranscript\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(SpeechToText, \"t6kwDy0VoEIVINRnICw3Wxfkjio=\");\n_c = SpeechToText;\nexport default SpeechToText;\nvar _c;\n$RefreshReg$(_c, \"SpeechToText\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","SpeechToText","_s","text","setText","isListening","setIsListening","recognitionRef","interimTranscript","setInterimTranscript","SpeechRecognition","window","webkitSpeechRecognition","recog","continuous","interimResults","lang","onresult","event","finalTranscript","i","resultIndex","results","length","transcript","trim","isFinal","prevText","onerror","console","error","onend","start","current","alert","startListening","stopListening","stop","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","line","index","style","color","_c","$RefreshReg$"],"sources":["C:/desktop/Personal Projects/speech-to-text/src/SpeechToText.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\nconst SpeechToText = () => {\r\n  const [text, setText] = useState([]); // Store transcribed text segments\r\n  const [isListening, setIsListening] = useState(false); // Toggle listening state\r\n  const recognitionRef = useRef(null); // Ref to store SpeechRecognition instance\r\n  const [interimTranscript, setInterimTranscript] = useState(''); // Store interim results\r\n\r\n  useEffect(() => {\r\n    // Initialize the SpeechRecognition instance\r\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    if (SpeechRecognition) {\r\n      const recog = new SpeechRecognition();\r\n      recog.continuous = true;\r\n      recog.interimResults = true; // Enable interim results for real-time transcription\r\n      recog.lang = 'en-IN'; // Set to English (India)\r\n\r\n      recog.onresult = (event) => {\r\n        let finalTranscript = '';\r\n        let interimTranscript = '';\r\n\r\n        for (let i = event.resultIndex; i < event.results.length; i++) {\r\n          const transcript = event.results[i][0].transcript.trim();\r\n          if (event.results[i].isFinal) {\r\n            finalTranscript += transcript + ' ';\r\n          } else {\r\n            interimTranscript += transcript + ' ';\r\n          }\r\n        }\r\n\r\n        setInterimTranscript(interimTranscript); // Update interim transcript\r\n\r\n        if (finalTranscript) {\r\n          setText(prevText => [...prevText, finalTranscript]); // Add final results to text\r\n          setInterimTranscript(''); // Clear interim results once they are finalized\r\n        }\r\n      };\r\n\r\n      recog.onerror = (event) => {\r\n        console.error('Speech recognition error:', event.error);\r\n        setIsListening(false);\r\n      };\r\n\r\n      recog.onend = () => {\r\n        if (isListening) {\r\n          recog.start(); // Restart recognition if still listening\r\n        }\r\n      };\r\n\r\n      recognitionRef.current = recog; // Store the recognition instance in ref\r\n    } else {\r\n      alert('Your browser does not support speech recognition.');\r\n    }\r\n  }, [isListening]);\r\n\r\n  const startListening = () => {\r\n    if (recognitionRef.current) {\r\n      recognitionRef.current.start();\r\n      setIsListening(true);\r\n    }\r\n  };\r\n\r\n  const stopListening = () => {\r\n    if (recognitionRef.current) {\r\n      recognitionRef.current.stop();\r\n      setIsListening(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={isListening ? stopListening : startListening}>\r\n        {isListening ? 'Stop Listening' : 'Start Listening'}\r\n      </button>\r\n      <div>\r\n        {text.map((line, index) => (\r\n          <p key={index}>{line}</p>\r\n        ))}\r\n        {interimTranscript && <p style={{ color: 'gray' }}>{interimTranscript}</p>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpeechToText;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}