{"ast":null,"code":"var _jsxFileName = \"C:\\\\desktop\\\\Personal Projects\\\\speech-to-text\\\\src\\\\SpeechToText.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpeechToText = () => {\n  _s();\n  const [text, setText] = useState('');\n  const [isListening, setIsListening] = useState(false);\n\n  // Check if the browser supports the Web Speech API\n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  const recognition = new SpeechRecognition();\n\n  // Configure the recognition instance\n  recognition.continuous = true; // Keep listening until explicitly stopped\n  recognition.interimResults = true; // Show partial results as the user is speaking\n  recognition.lang = 'en-US'; // Language to recognize (e.g., English)\n\n  // Event handler for when the speech recognition receives a result\n  recognition.onresult = event => {\n    let transcript = '';\n    for (let i = 0; i < event.results.length; i++) {\n      transcript += event.results[i][0].transcript;\n    }\n    setText(transcript);\n  };\n\n  // Start or stop listening when the button is clicked\n  const handleClick = () => {\n    if (isListening) {\n      recognition.stop();\n    } else {\n      recognition.start();\n    }\n    setIsListening(!isListening);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: isListening ? 'Stop Listening' : 'Start Listening'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(SpeechToText, \"Z7CCLW00D162LcB46cGdkuuIwBw=\");\n_c = SpeechToText;\nexport default SpeechToText;\nvar _c;\n$RefreshReg$(_c, \"SpeechToText\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SpeechToText","_s","text","setText","isListening","setIsListening","SpeechRecognition","window","webkitSpeechRecognition","recognition","continuous","interimResults","lang","onresult","event","transcript","i","results","length","handleClick","stop","start","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/desktop/Personal Projects/speech-to-text/src/SpeechToText.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst SpeechToText = () => {\r\n  const [text, setText] = useState('');\r\n  const [isListening, setIsListening] = useState(false);\r\n\r\n  // Check if the browser supports the Web Speech API\r\n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n  const recognition = new SpeechRecognition();\r\n\r\n  // Configure the recognition instance\r\n  recognition.continuous = true; // Keep listening until explicitly stopped\r\n  recognition.interimResults = true; // Show partial results as the user is speaking\r\n  recognition.lang = 'en-US'; // Language to recognize (e.g., English)\r\n\r\n  // Event handler for when the speech recognition receives a result\r\n  recognition.onresult = (event) => {\r\n    let transcript = '';\r\n    for (let i = 0; i < event.results.length; i++) {\r\n      transcript += event.results[i][0].transcript;\r\n    }\r\n    setText(transcript);\r\n  };\r\n\r\n  // Start or stop listening when the button is clicked\r\n  const handleClick = () => {\r\n    if (isListening) {\r\n      recognition.stop();\r\n    } else {\r\n      recognition.start();\r\n    }\r\n    setIsListening(!isListening);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleClick}>\r\n        {isListening ? 'Stop Listening' : 'Start Listening'}\r\n      </button>\r\n      <p>{text}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpeechToText;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACO,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;;EAErD;EACA,MAAMS,iBAAiB,GAAGC,MAAM,CAACD,iBAAiB,IAAIC,MAAM,CAACC,uBAAuB;EACpF,MAAMC,WAAW,GAAG,IAAIH,iBAAiB,CAAC,CAAC;;EAE3C;EACAG,WAAW,CAACC,UAAU,GAAG,IAAI,CAAC,CAAC;EAC/BD,WAAW,CAACE,cAAc,GAAG,IAAI,CAAC,CAAC;EACnCF,WAAW,CAACG,IAAI,GAAG,OAAO,CAAC,CAAC;;EAE5B;EACAH,WAAW,CAACI,QAAQ,GAAIC,KAAK,IAAK;IAChC,IAAIC,UAAU,GAAG,EAAE;IACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,OAAO,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;MAC7CD,UAAU,IAAID,KAAK,CAACG,OAAO,CAACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAACD,UAAU;IAC9C;IACAZ,OAAO,CAACY,UAAU,CAAC;EACrB,CAAC;;EAED;EACA,MAAMI,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAIf,WAAW,EAAE;MACfK,WAAW,CAACW,IAAI,CAAC,CAAC;IACpB,CAAC,MAAM;MACLX,WAAW,CAACY,KAAK,CAAC,CAAC;IACrB;IACAhB,cAAc,CAAC,CAACD,WAAW,CAAC;EAC9B,CAAC;EAED,oBACEL,OAAA;IAAAuB,QAAA,gBACEvB,OAAA;MAAQwB,OAAO,EAAEJ,WAAY;MAAAG,QAAA,EAC1BlB,WAAW,GAAG,gBAAgB,GAAG;IAAiB;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CAAC,eACT5B,OAAA;MAAAuB,QAAA,EAAIpB;IAAI;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEV,CAAC;AAAC1B,EAAA,CAxCID,YAAY;AAAA4B,EAAA,GAAZ5B,YAAY;AA0ClB,eAAeA,YAAY;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}